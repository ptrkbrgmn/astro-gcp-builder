import { expect } from 'chai';
import admin from 'firebase-admin';
import fetch from 'node-fetch'; // Using fetch to call the HTTP endpoint
import * as cheerio from 'cheerio';

// --- Test Configuration ---
const PROJECT_ID = 'astro-gcp-builder-test-182e3'; // ⚠️ Your specific project ID
const SOURCE_BUCKET_NAME = 'your-source-json-bucket';
const DEST_BUCKET_NAME = 'your-final-static-site-bucket';
const FUNCTION_URL = `http://127.0.0.1:5001/${PROJECT_ID}/us-central1/handler`;

// ⚙️ Tell the Admin SDK to connect to our local emulators
process.env.FIREBASE_STORAGE_EMULATOR_HOST = 'localhost:9199';
admin.initializeApp({ projectId: PROJECT_ID, storageBucket: SOURCE_BUCKET_NAME });

const sourceBucket = admin.storage().bucket(SOURCE_BUCKET_NAME);
const destBucket = admin.storage().bucket(DEST_BUCKET_NAME);

// --- Test Suite ---
describe('End-to-End Site Generation', function () {
  this.timeout(30000); // 30 second timeout for the full process

  // Before starting, clean out both buckets to ensure a fresh state
  before(async () => {
    await sourceBucket.deleteFiles({ force: true });
    await destBucket.deleteFiles({ force: true });
  });

  it('should generate and upload the correct HTML when the function is triggered', async () => {
    // 1. ARRANGE: Create test data and upload it to the source bucket
    const testPost = [{
      slug: 'e2e-final-test',
      title: 'This is the E2E Test Title',
      author: 'E2E Bot',
      content: 'This content was generated by an automated test.'
    }];
    const testFileName = 'e2e-trigger.json';
    await sourceBucket.file(testFileName).save(JSON.stringify(testPost));
    console.log(`E2E: Uploaded ${testFileName} to source bucket.`);

    // 2. ACT: Call the HTTP function to trigger the build process
    console.log(`E2E: Triggering function at ${FUNCTION_URL}...`);
    const response = await fetch(FUNCTION_URL, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ pathToLargeJsonFile: testFileName }),
    });
    // Check that the function reported success
    expect(response.status).to.equal(200);
    console.log('E2E: Function reported success.');

    // 3. ASSERT: Download the generated HTML from the destination bucket and check its content
    const finalHtmlPath = `posts/${testPost[0].slug}/index.html`;
    console.log(`E2E: Checking for file in destination bucket: ${finalHtmlPath}`);
    const [fileContents] = await destBucket.file(finalHtmlPath).download();
    
    // Parse the downloaded HTML with cheerio
    const $ = cheerio.load(fileContents.toString());
    const h1Text = $('h1').text();

    // Verify the content is correct
    expect(h1Text).to.equal('This is the E2E Test Title');
    console.log('E2E: HTML content verified successfully!');
  });
});